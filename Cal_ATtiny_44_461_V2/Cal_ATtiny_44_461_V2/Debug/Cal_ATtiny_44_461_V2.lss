
Cal_ATtiny_44_461_V2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000bd8  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000bc  008000bc  00000cc8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000cf8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000d38  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001030  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000605  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b4f  00000000  00000000  0000245d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002fac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000571  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b56  00000000  00000000  0000379d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000042f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	40 c0       	rjmp	.+128    	; 0x82 <__ctors_end>
   2:	5a c0       	rjmp	.+180    	; 0xb8 <__bad_interrupt>
   4:	f0 c4       	rjmp	.+2528   	; 0x9e6 <__vector_2>
   6:	58 c0       	rjmp	.+176    	; 0xb8 <__bad_interrupt>
   8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
   a:	56 c0       	rjmp	.+172    	; 0xb8 <__bad_interrupt>
   c:	5e c5       	rjmp	.+2748   	; 0xaca <__vector_6>
   e:	54 c0       	rjmp	.+168    	; 0xb8 <__bad_interrupt>
  10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
  12:	bf c4       	rjmp	.+2430   	; 0x992 <__vector_9>
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
  16:	50 c0       	rjmp	.+160    	; 0xb8 <__bad_interrupt>
  18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
  1a:	4e c0       	rjmp	.+156    	; 0xb8 <__bad_interrupt>
  1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
  1e:	4c c0       	rjmp	.+152    	; 0xb8 <__bad_interrupt>
  20:	cc c4       	rjmp	.+2456   	; 0x9ba <__vector_16>

00000022 <__trampolines_end>:
  22:	55 73       	andi	r21, 0x35	; 53
  24:	65 72       	andi	r22, 0x25	; 37
  26:	20 63       	ori	r18, 0x30	; 48
  28:	61 6c       	ori	r22, 0xC1	; 193
  2a:	3f 20       	and	r3, r15
  2c:	45 6e       	ori	r20, 0xE5	; 229
  2e:	74 65       	ori	r23, 0x54	; 84
  30:	72 20       	and	r7, r2
  32:	31 20       	and	r3, r1
  34:	74 6f       	ori	r23, 0xF4	; 244
  36:	20 46       	sbci	r18, 0x60	; 96
  38:	20 74       	andi	r18, 0x40	; 64
  3a:	68 65       	ori	r22, 0x58	; 88
  3c:	6e 20       	and	r6, r14
  3e:	78 20       	and	r7, r8
  40:	69 66       	ori	r22, 0x69	; 105
  42:	20 4f       	sbci	r18, 0xF0	; 240
  44:	4b 0d       	add	r20, r11
  46:	0a 00       	.word	0x000a	; ????

00000048 <message_2>:
  48:	0d 0a 44 56 2f 57 56 2c 20 70 72 65 76 69 6f 75     ..DV/WV, previou
  58:	73 20 4f 53 43 43 41 4c 20 76 61 6c 75 65 73 20     s OSCCAL values 
  68:	20 00                                                .

0000006a <message_1>:
  6a:	0d 0a 0d 0a 43 61 6c 69 62 72 61 74 69 6e 67 20     ....Calibrating 
  7a:	41 54 74 69 6e 79 00 00                             ATtiny..

00000082 <__ctors_end>:
  82:	11 24       	eor	r1, r1
  84:	1f be       	out	0x3f, r1	; 63
  86:	cf e5       	ldi	r28, 0x5F	; 95
  88:	d2 e0       	ldi	r29, 0x02	; 2
  8a:	de bf       	out	0x3e, r29	; 62
  8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
  8e:	10 e0       	ldi	r17, 0x00	; 0
  90:	a0 e6       	ldi	r26, 0x60	; 96
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e8 ed       	ldi	r30, 0xD8	; 216
  96:	fb e0       	ldi	r31, 0x0B	; 11
  98:	02 c0       	rjmp	.+4      	; 0x9e <__do_copy_data+0x10>
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	ac 3b       	cpi	r26, 0xBC	; 188
  a0:	b1 07       	cpc	r27, r17
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0xc>

000000a4 <__do_clear_bss>:
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	ac eb       	ldi	r26, 0xBC	; 188
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
  ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
  ae:	a2 3e       	cpi	r26, 0xE2	; 226
  b0:	b2 07       	cpc	r27, r18
  b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
  b4:	1e d2       	rcall	.+1084   	; 0x4f2 <main>
  b6:	8e c5       	rjmp	.+2844   	; 0xbd4 <_exit>

000000b8 <__bad_interrupt>:
  b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <ReverseByte>:

unsigned char ReverseByte (unsigned char x) {
	x = ((x >> 1) & 0x55) | ((x << 1) & 0xAA);
  ba:	98 2f       	mov	r25, r24
  bc:	96 95       	lsr	r25
  be:	95 75       	andi	r25, 0x55	; 85
  c0:	88 0f       	add	r24, r24
  c2:	8a 7a       	andi	r24, 0xAA	; 170
  c4:	98 2b       	or	r25, r24
	x = ((x >> 2) & 0x33) | ((x << 2) & 0xCC);
  c6:	89 2f       	mov	r24, r25
  c8:	86 95       	lsr	r24
  ca:	86 95       	lsr	r24
  cc:	83 73       	andi	r24, 0x33	; 51
  ce:	99 0f       	add	r25, r25
  d0:	99 0f       	add	r25, r25
  d2:	9c 7c       	andi	r25, 0xCC	; 204
  d4:	89 2b       	or	r24, r25
	x = ((x >> 4) & 0x0F) | ((x << 4) & 0xF0);
return x;}
  d6:	82 95       	swap	r24
  d8:	08 95       	ret

000000da <Char_to_USI>:



void Char_to_USI(unsigned char Txdata){					//Transmit data
	
	Txdata = ReverseByte(Txdata);
  da:	ef df       	rcall	.-34     	; 0xba <ReverseByte>
	Start_clock;										//Start T0 running  
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	93 bf       	out	0x33, r25	; 51
		
	while (!(char_transmitted));						//wait for USI to be initialised
  e0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__data_end>
  e4:	99 23       	and	r25, r25
  e6:	e1 f3       	breq	.-8      	; 0xe0 <Char_to_USI+0x6>
	char_transmitted = 0;
  e8:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
	USISR = 0xF0 | (0x10 - 0x05);						//First half of data
  ec:	9b ef       	ldi	r25, 0xFB	; 251
  ee:	9e b9       	out	0x0e, r25	; 14
	USIDR = (Txdata >> 2) | 0x80;
  f0:	98 2f       	mov	r25, r24
  f2:	96 95       	lsr	r25
  f4:	96 95       	lsr	r25
  f6:	90 68       	ori	r25, 0x80	; 128
  f8:	9f b9       	out	0x0f, r25	; 15

	while (!(char_transmitted));						//wait for USI counter overflow
  fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__data_end>
  fe:	99 23       	and	r25, r25
 100:	e1 f3       	breq	.-8      	; 0xfa <Char_to_USI+0x20>
	char_transmitted = 0;
 102:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
	USISR = 0xF0 | (0x10 - 0x05);						//Second half of data
 106:	9b ef       	ldi	r25, 0xFB	; 251
 108:	9e b9       	out	0x0e, r25	; 14
	USIDR = (Txdata << 3) | 0x07;
 10a:	88 0f       	add	r24, r24
 10c:	88 0f       	add	r24, r24
 10e:	88 0f       	add	r24, r24
 110:	87 60       	ori	r24, 0x07	; 7
 112:	8f b9       	out	0x0f, r24	; 15

	while (!(char_transmitted));						//wait for USI counter overflow
 114:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__data_end>
 118:	88 23       	and	r24, r24
 11a:	e1 f3       	breq	.-8      	; 0x114 <Char_to_USI+0x3a>
	char_transmitted = 0;
 11c:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__data_end>
	TCCR0B = 0;	}										//halt baud rate clock
 120:	13 be       	out	0x33, r1	; 51
 122:	08 95       	ret

00000124 <Initialise_USI_Tx>:



void Initialise_USI_Tx (void)
	{	
		WPU_on_DI_pin;
 124:	8a b3       	in	r24, 0x1a	; 26
 126:	1a ba       	out	0x1a, r1	; 26
 128:	de 9a       	sbi	0x1b, 6	; 27
		
		USICR = 0;										//Reset USI
 12a:	1d b8       	out	0x0d, r1	; 13
		TCCR0B = 0;										//Ensure that T0 is not running.
 12c:	13 be       	out	0x33, r1	; 51
		OCR0A =  Tx_clock;								//Uses Interrupt on T0 compare match
 12e:	89 eb       	ldi	r24, 0xB9	; 185
 130:	86 bf       	out	0x36, r24	; 54
		TIFR0 = (1 << OCF0A);							//Clear spurious T0 interrupts
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	88 bf       	out	0x38, r24	; 56
		TCNT0 = 0;										//Clear TCNT0
 136:	12 be       	out	0x32, r1	; 50
		TIMSK0 |= (1 << OCIE0A);						//Enable T0 interrupt on output compare
 138:	89 b7       	in	r24, 0x39	; 57
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	89 bf       	out	0x39, r24	; 57
		
		USICR |= ( 1 << USIOIE);						//Enable USI counter interrupt
 13e:	6e 9a       	sbi	0x0d, 6	; 13
		USICR |= (1 << USIWM0);							//Select USI 3-wire mode
 140:	6c 9a       	sbi	0x0d, 4	; 13
		USICR |= (1 << USICS0);							//Select USI clock source (timer0 compare match)
 142:	6a 9a       	sbi	0x0d, 2	; 13
		Configure_DO_pin_as_Output;
 144:	d5 9a       	sbi	0x1a, 5	; 26
		
		USIDR = 0xFF;									//Load USIDR with 0xFF
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	8f b9       	out	0x0f, r24	; 15
		USISR = 0xFF;}									//clear bit counter
 14a:	8e b9       	out	0x0e, r24	; 14
 14c:	08 95       	ret

0000014e <Char_from_USI>:

/************************************************************************************************/


unsigned char Char_from_USI (char timeout)						//zero: wait indefinitively; one wait with timeout
{int p = 8000;
 14e:	cf 93       	push	r28
	unsigned char keypress;
		
	set_USI_ports_to_WPU;
 150:	9a b3       	in	r25, 0x1a	; 26
 152:	9f 78       	andi	r25, 0x8F	; 143
 154:	9a bb       	out	0x1a, r25	; 26
 156:	9b b3       	in	r25, 0x1b	; 27
 158:	90 67       	ori	r25, 0x70	; 112
 15a:	9b bb       	out	0x1b, r25	; 27
	USICR = 0;													//Reset USI
 15c:	1d b8       	out	0x0d, r1	; 13
	Enable_PCI_on_DI_pin;
 15e:	9a b7       	in	r25, 0x3a	; 58
 160:	90 61       	ori	r25, 0x10	; 16
 162:	9a bf       	out	0x3a, r25	; 58
 164:	9b b7       	in	r25, 0x3b	; 59
 166:	90 61       	ori	r25, 0x10	; 16
 168:	9b bf       	out	0x3b, r25	; 59
	set_PCI_mask_on_DI;
 16a:	90 e4       	ldi	r25, 0x40	; 64
 16c:	92 bb       	out	0x12, r25	; 18
	
	if (timeout)
 16e:	88 23       	and	r24, r24
 170:	49 f0       	breq	.+18     	; 0x184 <Char_from_USI+0x36>
 172:	81 e4       	ldi	r24, 0x41	; 65
 174:	9f e1       	ldi	r25, 0x1F	; 31
	while((!(char_received)) && p--);							//Wait for USI overflow ISR
 176:	20 91 da 00 	lds	r18, 0x00DA	; 0x8000da <char_received>
 17a:	21 11       	cpse	r18, r1
 17c:	07 c0       	rjmp	.+14     	; 0x18c <Char_from_USI+0x3e>
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	d1 f7       	brne	.-12     	; 0x176 <Char_from_USI+0x28>
 182:	04 c0       	rjmp	.+8      	; 0x18c <Char_from_USI+0x3e>
	else while(!(char_received));
 184:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <char_received>
 188:	88 23       	and	r24, r24
 18a:	e1 f3       	breq	.-8      	; 0x184 <Char_from_USI+0x36>
	if(char_received){
 18c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <char_received>
 190:	88 23       	and	r24, r24
 192:	31 f0       	breq	.+12     	; 0x1a0 <Char_from_USI+0x52>
		char_received = 0;
 194:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <char_received>
	keypress = ReverseByte(USIBR);}
 198:	80 b3       	in	r24, 0x10	; 16
 19a:	8f df       	rcall	.-226    	; 0xba <ReverseByte>
 19c:	c8 2f       	mov	r28, r24
 19e:	01 c0       	rjmp	.+2      	; 0x1a2 <Char_from_USI+0x54>
	else keypress = 0;
 1a0:	c0 e0       	ldi	r28, 0x00	; 0
	clear_PCI_mask_on_DI;
 1a2:	96 98       	cbi	0x12, 6	; 18
	Initialise_USI_Tx ();										//Leave USI ready to transmit char
 1a4:	bf df       	rcall	.-130    	; 0x124 <Initialise_USI_Tx>
return keypress;}
 1a6:	8c 2f       	mov	r24, r28
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <String_to_USI>:


void newline(void){String_to_USI ("\r\n");}


void String_to_USI(const char* s){
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	fc 01       	movw	r30, r24
	int i = 0;
	while(i < 200){
		if(s[i] == '\0') break;
 1b6:	80 81       	ld	r24, Z
 1b8:	81 11       	cpse	r24, r1
 1ba:	09 c0       	rjmp	.+18     	; 0x1ce <String_to_USI+0x22>
 1bc:	0f c0       	rjmp	.+30     	; 0x1dc <String_to_USI+0x30>
 1be:	89 91       	ld	r24, Y+
 1c0:	88 23       	and	r24, r24
 1c2:	61 f0       	breq	.+24     	; 0x1dc <String_to_USI+0x30>
	Char_to_USI(s[i++]);} }
 1c4:	8a df       	rcall	.-236    	; 0xda <Char_to_USI>
void newline(void){String_to_USI ("\r\n");}


void String_to_USI(const char* s){
	int i = 0;
	while(i < 200){
 1c6:	0c 17       	cp	r16, r28
 1c8:	1d 07       	cpc	r17, r29
 1ca:	c9 f7       	brne	.-14     	; 0x1be <String_to_USI+0x12>
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <String_to_USI+0x30>
 1ce:	8f 01       	movw	r16, r30
		if(s[i] == '\0') break;
	Char_to_USI(s[i++]);} }
 1d0:	84 df       	rcall	.-248    	; 0xda <Char_to_USI>
 1d2:	e8 01       	movw	r28, r16
 1d4:	21 96       	adiw	r28, 0x01	; 1
 1d6:	08 53       	subi	r16, 0x38	; 56
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
 1da:	f1 cf       	rjmp	.-30     	; 0x1be <String_to_USI+0x12>
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	08 95       	ret

000001e6 <newline>:



void newline(void){String_to_USI ("\r\n");}
 1e6:	80 e6       	ldi	r24, 0x60	; 96
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	e0 df       	rcall	.-64     	; 0x1ac <String_to_USI>
 1ec:	08 95       	ret

000001ee <Flash_String_to_USI>:
	Char_to_USI(s[i++]);} }



/*********************************************************************/
void Flash_String_to_USI(const char* pFlashStr){
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
	int i;
	for(i = 0; pgm_read_byte(&pFlashStr[i]) && i < 60; i++)
 1f6:	ec 01       	movw	r28, r24
 1f8:	fc 01       	movw	r30, r24
 1fa:	24 91       	lpm	r18, Z
 1fc:	22 23       	and	r18, r18
 1fe:	71 f0       	breq	.+28     	; 0x21c <Flash_String_to_USI+0x2e>
 200:	8c 01       	movw	r16, r24
 202:	04 5c       	subi	r16, 0xC4	; 196
 204:	1f 4f       	sbci	r17, 0xFF	; 255
Char_to_USI(pgm_read_byte(&pFlashStr[i]));}
 206:	fe 01       	movw	r30, r28
 208:	84 91       	lpm	r24, Z
 20a:	67 df       	rcall	.-306    	; 0xda <Char_to_USI>
 20c:	21 96       	adiw	r28, 0x01	; 1


/*********************************************************************/
void Flash_String_to_USI(const char* pFlashStr){
	int i;
	for(i = 0; pgm_read_byte(&pFlashStr[i]) && i < 60; i++)
 20e:	fe 01       	movw	r30, r28
 210:	94 91       	lpm	r25, Z
 212:	99 23       	and	r25, r25
 214:	19 f0       	breq	.+6      	; 0x21c <Flash_String_to_USI+0x2e>
 216:	0c 17       	cp	r16, r28
 218:	1d 07       	cpc	r17, r29
 21a:	a9 f7       	brne	.-22     	; 0x206 <Flash_String_to_USI+0x18>
Char_to_USI(pgm_read_byte(&pFlashStr[i]));}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	1f 91       	pop	r17
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <SBtoAL>:




/*********************************************************************/
void SBtoAL(unsigned char array[], long num, char radix){					//Signed Binary to Askii
 226:	2f 92       	push	r2
 228:	3f 92       	push	r3
 22a:	4f 92       	push	r4
 22c:	5f 92       	push	r5
 22e:	6f 92       	push	r6
 230:	7f 92       	push	r7
 232:	8f 92       	push	r8
 234:	9f 92       	push	r9
 236:	af 92       	push	r10
 238:	bf 92       	push	r11
 23a:	cf 92       	push	r12
 23c:	df 92       	push	r13
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	1c 01       	movw	r2, r24
 24c:	2a 01       	movw	r4, r20
 24e:	3b 01       	movw	r6, r22
	int m=0;
	long sign;

	if (num == 0x80000000){
 250:	41 15       	cp	r20, r1
 252:	51 05       	cpc	r21, r1
 254:	61 05       	cpc	r22, r1
 256:	70 48       	sbci	r23, 0x80	; 128
 258:	61 f5       	brne	.+88     	; 0x2b2 <__stack+0x53>
		switch(radix){
 25a:	2a 30       	cpi	r18, 0x0A	; 10
 25c:	19 f0       	breq	.+6      	; 0x264 <__stack+0x5>
 25e:	20 31       	cpi	r18, 0x10	; 16
 260:	b9 f0       	breq	.+46     	; 0x290 <__stack+0x31>
 262:	63 c0       	rjmp	.+198    	; 0x32a <__stack+0xcb>
			case 10: array[0] = '8';array[1] = '4'; array[2] = '6';			//0x80000000 * -1 = 0
 264:	98 e3       	ldi	r25, 0x38	; 56
 266:	f1 01       	movw	r30, r2
 268:	90 83       	st	Z, r25
 26a:	84 e3       	ldi	r24, 0x34	; 52
 26c:	81 83       	std	Z+1, r24	; 0x01
 26e:	26 e3       	ldi	r18, 0x36	; 54
 270:	22 83       	std	Z+2, r18	; 0x02
			array[3] = '3';array[4] = '8';array[5] = '4'; array[6] = '7';
 272:	23 e3       	ldi	r18, 0x33	; 51
 274:	23 83       	std	Z+3, r18	; 0x03
 276:	94 83       	std	Z+4, r25	; 0x04
 278:	85 83       	std	Z+5, r24	; 0x05
 27a:	97 e3       	ldi	r25, 0x37	; 55
 27c:	96 83       	std	Z+6, r25	; 0x06
			array[7] = '4';array[8] = '1';array[9] = '2';
 27e:	87 83       	std	Z+7, r24	; 0x07
 280:	81 e3       	ldi	r24, 0x31	; 49
 282:	80 87       	std	Z+8, r24	; 0x08
 284:	82 e3       	ldi	r24, 0x32	; 50
 286:	81 87       	std	Z+9, r24	; 0x09
			array[10] = '-'; array[11] = '\0'; break;
 288:	8d e2       	ldi	r24, 0x2D	; 45
 28a:	82 87       	std	Z+10, r24	; 0x0a
 28c:	13 86       	std	Z+11, r1	; 0x0b
 28e:	4d c0       	rjmp	.+154    	; 0x32a <__stack+0xcb>

			case 16: array[0] = '0';array[1] = '0'; array[2] = '0';			//0x80000000 * -1 = 0
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	f1 01       	movw	r30, r2
 294:	80 83       	st	Z, r24
 296:	81 83       	std	Z+1, r24	; 0x01
 298:	82 83       	std	Z+2, r24	; 0x02
			array[3] = '0';array[4] = '0';array[5] = '0'; array[6] = '0';
 29a:	83 83       	std	Z+3, r24	; 0x03
 29c:	84 83       	std	Z+4, r24	; 0x04
 29e:	85 83       	std	Z+5, r24	; 0x05
 2a0:	86 83       	std	Z+6, r24	; 0x06
			array[7] = '8';array[8] = '-';array[9] = '\0';
 2a2:	88 e3       	ldi	r24, 0x38	; 56
 2a4:	87 83       	std	Z+7, r24	; 0x07
 2a6:	8d e2       	ldi	r24, 0x2D	; 45
 2a8:	80 87       	std	Z+8, r24	; 0x08
 2aa:	11 86       	std	Z+9, r1	; 0x09
		array[10] = '\0'; array[11] = '\0'; break; } return;}
 2ac:	12 86       	std	Z+10, r1	; 0x0a
 2ae:	13 86       	std	Z+11, r1	; 0x0b
 2b0:	3c c0       	rjmp	.+120    	; 0x32a <__stack+0xcb>
 2b2:	e1 01       	movw	r28, r2
 2b4:	c1 01       	movw	r24, r2
 2b6:	0c 96       	adiw	r24, 0x0c	; 12
/*********************************************************************/
void SBtoAL(unsigned char array[], long num, char radix){					//Signed Binary to Askii
	int m=0;
	long sign;

	if (num == 0x80000000){
 2b8:	f1 01       	movw	r30, r2
			case 16: array[0] = '0';array[1] = '0'; array[2] = '0';			//0x80000000 * -1 = 0
			array[3] = '0';array[4] = '0';array[5] = '0'; array[6] = '0';
			array[7] = '8';array[8] = '-';array[9] = '\0';
		array[10] = '\0'; array[11] = '\0'; break; } return;}

		for (int n = 0; n <=11; n++)array[n] = 0;
 2ba:	11 92       	st	Z+, r1
 2bc:	e8 17       	cp	r30, r24
 2be:	f9 07       	cpc	r31, r25
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <__stack+0x5b>
 2c2:	73 01       	movw	r14, r6
 2c4:	62 01       	movw	r12, r4
 2c6:	77 20       	and	r7, r7
 2c8:	3c f4       	brge	.+14     	; 0x2d8 <__stack+0x79>
 2ca:	cc 24       	eor	r12, r12
 2cc:	dd 24       	eor	r13, r13
 2ce:	76 01       	movw	r14, r12
 2d0:	c4 18       	sub	r12, r4
 2d2:	d5 08       	sbc	r13, r5
 2d4:	e6 08       	sbc	r14, r6
 2d6:	f7 08       	sbc	r15, r7
 2d8:	00 e0       	ldi	r16, 0x00	; 0
 2da:	10 e0       	ldi	r17, 0x00	; 0
		if ((sign = num) < 0) num = num * (-1);

		do {array[m] = num % radix;
 2dc:	82 2e       	mov	r8, r18
 2de:	91 2c       	mov	r9, r1
 2e0:	a1 2c       	mov	r10, r1
 2e2:	b1 2c       	mov	r11, r1
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	a5 01       	movw	r20, r10
 2ea:	94 01       	movw	r18, r8
 2ec:	1f d4       	rcall	.+2110   	; 0xb2c <__divmodsi4>
 2ee:	68 83       	st	Y, r22
			if(array[m] < 10)array[m] += '0'; else array[m] += '7';
 2f0:	6a 30       	cpi	r22, 0x0A	; 10
 2f2:	18 f4       	brcc	.+6      	; 0x2fa <__stack+0x9b>
 2f4:	60 5d       	subi	r22, 0xD0	; 208
 2f6:	68 83       	st	Y, r22
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <__stack+0x9f>
 2fa:	69 5c       	subi	r22, 0xC9	; 201
 2fc:	68 83       	st	Y, r22
		m++;} while ((num = num/radix) > 0);
 2fe:	0f 5f       	subi	r16, 0xFF	; 255
 300:	1f 4f       	sbci	r17, 0xFF	; 255
 302:	c7 01       	movw	r24, r14
 304:	b6 01       	movw	r22, r12
 306:	a5 01       	movw	r20, r10
 308:	94 01       	movw	r18, r8
 30a:	10 d4       	rcall	.+2080   	; 0xb2c <__divmodsi4>
 30c:	69 01       	movw	r12, r18
 30e:	7a 01       	movw	r14, r20
 310:	21 96       	adiw	r28, 0x01	; 1
 312:	12 16       	cp	r1, r18
 314:	13 06       	cpc	r1, r19
 316:	14 06       	cpc	r1, r20
 318:	15 06       	cpc	r1, r21
 31a:	24 f3       	brlt	.-56     	; 0x2e4 <__stack+0x85>
		if (sign < 0) {array[m] = '-';m++;}}
 31c:	77 20       	and	r7, r7
 31e:	2c f4       	brge	.+10     	; 0x32a <__stack+0xcb>
 320:	f1 01       	movw	r30, r2
 322:	e0 0f       	add	r30, r16
 324:	f1 1f       	adc	r31, r17
 326:	8d e2       	ldi	r24, 0x2D	; 45
 328:	80 83       	st	Z, r24
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	ef 90       	pop	r14
 336:	df 90       	pop	r13
 338:	cf 90       	pop	r12
 33a:	bf 90       	pop	r11
 33c:	af 90       	pop	r10
 33e:	9f 90       	pop	r9
 340:	8f 90       	pop	r8
 342:	7f 90       	pop	r7
 344:	6f 90       	pop	r6
 346:	5f 90       	pop	r5
 348:	4f 90       	pop	r4
 34a:	3f 90       	pop	r3
 34c:	2f 90       	pop	r2
 34e:	08 95       	ret

00000350 <NumericString_to_PC>:




		/*********************************************************************/
		void NumericString_to_PC(unsigned char* s){
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
			int n=0;
			while (s[n] != '\0')n++;									//scroll to end of string counting the number of characters
 358:	fc 01       	movw	r30, r24
 35a:	20 81       	ld	r18, Z
 35c:	22 23       	and	r18, r18
 35e:	91 f0       	breq	.+36     	; 0x384 <NumericString_to_PC+0x34>
 360:	31 96       	adiw	r30, 0x01	; 1
 362:	c0 e0       	ldi	r28, 0x00	; 0
 364:	d0 e0       	ldi	r29, 0x00	; 0
 366:	21 96       	adiw	r28, 0x01	; 1
 368:	21 91       	ld	r18, Z+
 36a:	21 11       	cpse	r18, r1
 36c:	fc cf       	rjmp	.-8      	; 0x366 <NumericString_to_PC+0x16>
		for(int m = n; m; m--)Char_to_USI(*(s + m-1));}
 36e:	20 97       	sbiw	r28, 0x00	; 0
 370:	49 f0       	breq	.+18     	; 0x384 <NumericString_to_PC+0x34>
 372:	8c 01       	movw	r16, r24
 374:	0c 0f       	add	r16, r28
 376:	1d 1f       	adc	r17, r29
 378:	f8 01       	movw	r30, r16
 37a:	82 91       	ld	r24, -Z
 37c:	8f 01       	movw	r16, r30
 37e:	ad de       	rcall	.-678    	; 0xda <Char_to_USI>
 380:	21 97       	sbiw	r28, 0x01	; 1
 382:	d1 f7       	brne	.-12     	; 0x378 <NumericString_to_PC+0x28>
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	1f 91       	pop	r17
 38a:	0f 91       	pop	r16
 38c:	08 95       	ret

0000038e <Num_to_PC>:




/*********************************************************************/
void Num_to_PC(char radix, long int_num){
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	cd b7       	in	r28, 0x3d	; 61
 394:	de b7       	in	r29, 0x3e	; 62
 396:	2c 97       	sbiw	r28, 0x0c	; 12
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
	unsigned char array[12];												//long  has 10 chars + sign + null terminator
	SBtoAL(array, int_num, radix);											//calls the Binary to askii subroutine
 3a2:	28 2f       	mov	r18, r24
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	3e df       	rcall	.-388    	; 0x226 <SBtoAL>
NumericString_to_PC(array);}
 3aa:	ce 01       	movw	r24, r28
 3ac:	01 96       	adiw	r24, 0x01	; 1
 3ae:	d0 df       	rcall	.-96     	; 0x350 <NumericString_to_PC>
 3b0:	2c 96       	adiw	r28, 0x0c	; 12
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <Timer_T0_sub>:
		
		

		/************************************************************************************************/
		void Timer_T0_sub(char Counter_speed, unsigned char Start_point){
			TCNT0 = Start_point;
 3c2:	62 bf       	out	0x32, r22	; 50
			TCCR0B = Counter_speed;
 3c4:	83 bf       	out	0x33, r24	; 51
			while(!(TIFR0 & (1<<TOV0)));
 3c6:	08 b6       	in	r0, 0x38	; 56
 3c8:	00 fe       	sbrs	r0, 0
 3ca:	fd cf       	rjmp	.-6      	; 0x3c6 <Timer_T0_sub+0x4>
		TIFR0 |= (1<<TOV0); TCCR0B = 0;}
 3cc:	88 b7       	in	r24, 0x38	; 56
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	88 bf       	out	0x38, r24	; 56
 3d2:	13 be       	out	0x33, r1	; 51
 3d4:	08 95       	ret

000003d6 <compute_error>:



/************************************************************************************************/
long compute_error(char Num_Av, char sign)
{long error;
 3d6:	cf 93       	push	r28
 3d8:	28 2f       	mov	r18, r24
 3da:	c6 2f       	mov	r28, r22
	
	error_sum = 0;
 3dc:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <error_sum>
 3e0:	10 92 d3 00 	sts	0x00D3, r1	; 0x8000d3 <error_sum+0x1>
 3e4:	10 92 d4 00 	sts	0x00D4, r1	; 0x8000d4 <error_sum+0x2>
 3e8:	10 92 d5 00 	sts	0x00D5, r1	; 0x8000d5 <error_sum+0x3>
	int_counter = 0;													//Initialise all registers
 3ec:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <int_counter>
	TCNT1_sum = 0;
 3f0:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <TCNT1_sum>
 3f4:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <TCNT1_sum+0x1>
 3f8:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <TCNT1_sum+0x2>
 3fc:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <TCNT1_sum+0x3>
	TCCR1B = 0;															//Ensure T1 is halted
 400:	1e bc       	out	0x2e, r1	; 46
	TCNT1 = 0;															//clear Timer 1
 402:	1d bc       	out	0x2d, r1	; 45
 404:	1c bc       	out	0x2c, r1	; 44
	enable_PCI_on_SCK_pin;
 406:	9a b7       	in	r25, 0x3a	; 58
 408:	90 61       	ori	r25, 0x10	; 16
 40a:	9a bf       	out	0x3a, r25	; 58
 40c:	9b b7       	in	r25, 0x3b	; 59
 40e:	90 61       	ori	r25, 0x10	; 16
 410:	9b bf       	out	0x3b, r25	; 59
	set_PCI_mask_on_SCK;	
 412:	90 e1       	ldi	r25, 0x10	; 16
 414:	92 bb       	out	0x12, r25	; 18
	Enable_Timer_1_Interrupt;
 416:	61 9a       	sbi	0x0c, 1	; 12
	while (int_counter < Num_Av);										//Pause here for interrupts: Average the result over several 32.768mS periods
 418:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <int_counter>
 41c:	92 17       	cp	r25, r18
 41e:	e0 f3       	brcs	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	disable_PCI_on_SCK_pin;
 420:	9b b7       	in	r25, 0x3b	; 59
 422:	9f 7e       	andi	r25, 0xEF	; 239
 424:	9b bf       	out	0x3b, r25	; 59
	clear_PCI_mask_on_SCK;	
 426:	94 98       	cbi	0x12, 4	; 18
	Disable_Timer_1_Interrupt;
 428:	61 98       	cbi	0x0c, 1	; 12
	error = error_sum/Num_Av;											//Obtain average result
 42a:	60 91 d2 00 	lds	r22, 0x00D2	; 0x8000d2 <error_sum>
 42e:	70 91 d3 00 	lds	r23, 0x00D3	; 0x8000d3 <error_sum+0x1>
 432:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <error_sum+0x2>
 436:	90 91 d5 00 	lds	r25, 0x00D5	; 0x8000d5 <error_sum+0x3>
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	75 d3       	rcall	.+1770   	; 0xb2c <__divmodsi4>
 442:	ca 01       	movw	r24, r20
 444:	b9 01       	movw	r22, r18
	if (!(sign) && error < 0) error = error * (-1);						//Set sign if required
 446:	c1 11       	cpse	r28, r1
 448:	09 c0       	rjmp	.+18     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44a:	55 23       	and	r21, r21
 44c:	3c f4       	brge	.+14     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 44e:	66 27       	eor	r22, r22
 450:	77 27       	eor	r23, r23
 452:	cb 01       	movw	r24, r22
 454:	62 1b       	sub	r22, r18
 456:	73 0b       	sbc	r23, r19
 458:	84 0b       	sbc	r24, r20
 45a:	95 0b       	sbc	r25, r21
	return error;
	}
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <save_cal_values>:




/************************************************************************************************/
void save_cal_values(unsigned char OSCCAL_user){
 460:	cf 93       	push	r28
 462:	c8 2f       	mov	r28, r24
	eeprom_write_byte((uint8_t*)(EE_size - 1), OSCCAL_user);
 464:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EE_size>
 468:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <EE_size+0x1>
 46c:	6c 2f       	mov	r22, r28
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	a3 d3       	rcall	.+1862   	; 0xbb8 <eeprom_write_byte>
	eeprom_write_byte((uint8_t*)(EE_size - 2), OSCCAL_user);
 472:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EE_size>
 476:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <EE_size+0x1>
 47a:	6c 2f       	mov	r22, r28
 47c:	02 97       	sbiw	r24, 0x02	; 2
 47e:	9c d3       	rcall	.+1848   	; 0xbb8 <eeprom_write_byte>
eeprom_write_byte((uint8_t*)(EE_size - 3), OSCCAL_DV);}
 480:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EE_size>
 484:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <EE_size+0x1>
 488:	60 91 bf 00 	lds	r22, 0x00BF	; 0x8000bf <OSCCAL_DV>
 48c:	03 97       	sbiw	r24, 0x03	; 3
 48e:	94 d3       	rcall	.+1832   	; 0xbb8 <eeprom_write_byte>
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <printout_cal_values>:



/********************************************************************************************************************************/
void printout_cal_values(void){
	String_to_USI("\r\nValues saved to EEPROM  ");
 494:	83 e6       	ldi	r24, 0x63	; 99
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	89 de       	rcall	.-750    	; 0x1ac <String_to_USI>
	Num_to_PC(10,eeprom_read_byte((uint8_t*)(EE_size-3))); String_to_USI("  ");
 49a:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EE_size>
 49e:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <EE_size+0x1>
 4a2:	03 97       	sbiw	r24, 0x03	; 3
 4a4:	81 d3       	rcall	.+1794   	; 0xba8 <eeprom_read_byte>
 4a6:	48 2f       	mov	r20, r24
 4a8:	50 e0       	ldi	r21, 0x00	; 0
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	70 e0       	ldi	r23, 0x00	; 0
 4ae:	8a e0       	ldi	r24, 0x0A	; 10
 4b0:	6e df       	rcall	.-292    	; 0x38e <Num_to_PC>
 4b2:	8b e7       	ldi	r24, 0x7B	; 123
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	7a de       	rcall	.-780    	; 0x1ac <String_to_USI>
	Num_to_PC(10,eeprom_read_byte((uint8_t*)(EE_size-2))); String_to_USI("  ");
 4b8:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EE_size>
 4bc:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <EE_size+0x1>
 4c0:	02 97       	sbiw	r24, 0x02	; 2
 4c2:	72 d3       	rcall	.+1764   	; 0xba8 <eeprom_read_byte>
 4c4:	48 2f       	mov	r20, r24
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	8a e0       	ldi	r24, 0x0A	; 10
 4ce:	5f df       	rcall	.-322    	; 0x38e <Num_to_PC>
 4d0:	8b e7       	ldi	r24, 0x7B	; 123
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	6b de       	rcall	.-810    	; 0x1ac <String_to_USI>
Num_to_PC(10,eeprom_read_byte((uint8_t*)(EE_size-1))); newline();}
 4d6:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EE_size>
 4da:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <EE_size+0x1>
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	63 d3       	rcall	.+1734   	; 0xba8 <eeprom_read_byte>
 4e2:	48 2f       	mov	r20, r24
 4e4:	50 e0       	ldi	r21, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	70 e0       	ldi	r23, 0x00	; 0
 4ea:	8a e0       	ldi	r24, 0x0A	; 10
 4ec:	50 df       	rcall	.-352    	; 0x38e <Num_to_PC>
 4ee:	7b de       	rcall	.-778    	; 0x1e6 <newline>
 4f0:	08 95       	ret

000004f2 <main>:
	
	char counter = 0;
	unsigned char Rx_data_byte;
	int EEP_MAX = 0x2000;
	
	setup_Attiny_HW;
 4f2:	a8 95       	wdr
 4f4:	84 b7       	in	r24, 0x34	; 52
 4f6:	87 7f       	andi	r24, 0xF7	; 247
 4f8:	84 bf       	out	0x34, r24	; 52
 4fa:	81 b5       	in	r24, 0x21	; 33
 4fc:	88 61       	ori	r24, 0x18	; 24
 4fe:	81 bd       	out	0x21, r24	; 33
 500:	11 bc       	out	0x21, r1	; 33
 502:	85 b7       	in	r24, 0x35	; 53
 504:	8f 7b       	andi	r24, 0xBF	; 191
 506:	85 bf       	out	0x35, r24	; 53
 508:	1a ba       	out	0x1a, r1	; 26
 50a:	8f ef       	ldi	r24, 0xFF	; 255
 50c:	8b bb       	out	0x1b, r24	; 27
 50e:	17 ba       	out	0x17, r1	; 23
 510:	8f e0       	ldi	r24, 0x0F	; 15
 512:	88 bb       	out	0x18, r24	; 24
 514:	e0 ec       	ldi	r30, 0xC0	; 192
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	8e e7       	ldi	r24, 0x7E	; 126
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	91 83       	std	Z+1, r25	; 0x01
 51e:	80 83       	st	Z, r24
 520:	82 e8       	ldi	r24, 0x82	; 130
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	93 83       	std	Z+3, r25	; 0x03
 526:	82 83       	std	Z+2, r24	; 0x02
 528:	86 e8       	ldi	r24, 0x86	; 134
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	95 83       	std	Z+5, r25	; 0x05
 52e:	84 83       	std	Z+4, r24	; 0x04
 530:	8a e8       	ldi	r24, 0x8A	; 138
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	97 83       	std	Z+7, r25	; 0x07
 536:	86 83       	std	Z+6, r24	; 0x06
 538:	8f e8       	ldi	r24, 0x8F	; 143
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	91 87       	std	Z+9, r25	; 0x09
 53e:	80 87       	std	Z+8, r24	; 0x08
 540:	84 e9       	ldi	r24, 0x94	; 148
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	93 87       	std	Z+11, r25	; 0x0b
 546:	82 87       	std	Z+10, r24	; 0x0a
 548:	89 e9       	ldi	r24, 0x99	; 153
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	95 87       	std	Z+13, r25	; 0x0d
 54e:	84 87       	std	Z+12, r24	; 0x0c
 550:	8e e9       	ldi	r24, 0x9E	; 158
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	97 87       	std	Z+15, r25	; 0x0f
 556:	86 87       	std	Z+14, r24	; 0x0e
 558:	8c ef       	ldi	r24, 0xFC	; 252
 55a:	9f e1       	ldi	r25, 0x1F	; 31
 55c:	25 d3       	rcall	.+1610   	; 0xba8 <eeprom_read_byte>
 55e:	c8 2f       	mov	r28, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <sig_byte_2+0x1>
 566:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <sig_byte_2>
 56a:	8b ef       	ldi	r24, 0xFB	; 251
 56c:	9f e1       	ldi	r25, 0x1F	; 31
 56e:	1c d3       	rcall	.+1592   	; 0xba8 <eeprom_read_byte>
 570:	28 2f       	mov	r18, r24
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <sig_byte_3+0x1>
 578:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <sig_byte_3>
 57c:	c2 39       	cpi	r28, 0x92	; 146
 57e:	91 f1       	breq	.+100    	; 0x5e4 <main+0xf2>
 580:	c3 39       	cpi	r28, 0x93	; 147
 582:	09 f4       	brne	.+2      	; 0x586 <main+0x94>
 584:	55 c0       	rjmp	.+170    	; 0x630 <main+0x13e>
 586:	c1 39       	cpi	r28, 0x91	; 145
 588:	09 f0       	breq	.+2      	; 0x58c <main+0x9a>
 58a:	78 c0       	rjmp	.+240    	; 0x67c <main+0x18a>
 58c:	20 e0       	ldi	r18, 0x00	; 0
 58e:	34 e0       	ldi	r19, 0x04	; 4
 590:	30 93 d7 00 	sts	0x00D7, r19	; 0x8000d7 <FlashSZ+0x1>
 594:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <FlashSZ>
 598:	20 e8       	ldi	r18, 0x80	; 128
 59a:	30 e0       	ldi	r19, 0x00	; 0
 59c:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <EE_size+0x1>
 5a0:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <EE_size>
 5a4:	8b 30       	cpi	r24, 0x0B	; 11
 5a6:	59 f0       	breq	.+22     	; 0x5be <main+0xcc>
 5a8:	8c 30       	cpi	r24, 0x0C	; 12
 5aa:	71 f0       	breq	.+28     	; 0x5c8 <main+0xd6>
 5ac:	89 30       	cpi	r24, 0x09	; 9
 5ae:	99 f4       	brne	.+38     	; 0x5d6 <main+0xe4>
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 5b8:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 5bc:	65 c0       	rjmp	.+202    	; 0x688 <main+0x196>
 5be:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <device_ptr+0x1>
 5c2:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <device_ptr>
 5c6:	60 c0       	rjmp	.+192    	; 0x688 <main+0x196>
 5c8:	83 e0       	ldi	r24, 0x03	; 3
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 5d0:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 5d4:	59 c0       	rjmp	.+178    	; 0x688 <main+0x196>
 5d6:	87 e0       	ldi	r24, 0x07	; 7
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 5de:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 5e2:	52 c0       	rjmp	.+164    	; 0x688 <main+0x196>
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	38 e0       	ldi	r19, 0x08	; 8
 5e8:	30 93 d7 00 	sts	0x00D7, r19	; 0x8000d7 <FlashSZ+0x1>
 5ec:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <FlashSZ>
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	31 e0       	ldi	r19, 0x01	; 1
 5f4:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <EE_size+0x1>
 5f8:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <EE_size>
 5fc:	87 30       	cpi	r24, 0x07	; 7
 5fe:	19 f0       	breq	.+6      	; 0x606 <main+0x114>
 600:	88 30       	cpi	r24, 0x08	; 8
 602:	41 f0       	breq	.+16     	; 0x614 <main+0x122>
 604:	0e c0       	rjmp	.+28     	; 0x622 <main+0x130>
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 60e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 612:	3a c0       	rjmp	.+116    	; 0x688 <main+0x196>
 614:	84 e0       	ldi	r24, 0x04	; 4
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 61c:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 620:	33 c0       	rjmp	.+102    	; 0x688 <main+0x196>
 622:	87 e0       	ldi	r24, 0x07	; 7
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 62a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 62e:	2c c0       	rjmp	.+88     	; 0x688 <main+0x196>
 630:	20 e0       	ldi	r18, 0x00	; 0
 632:	30 e1       	ldi	r19, 0x10	; 16
 634:	30 93 d7 00 	sts	0x00D7, r19	; 0x8000d7 <FlashSZ+0x1>
 638:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <FlashSZ>
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	32 e0       	ldi	r19, 0x02	; 2
 640:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <EE_size+0x1>
 644:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <EE_size>
 648:	8c 30       	cpi	r24, 0x0C	; 12
 64a:	19 f0       	breq	.+6      	; 0x652 <main+0x160>
 64c:	8d 30       	cpi	r24, 0x0D	; 13
 64e:	41 f0       	breq	.+16     	; 0x660 <main+0x16e>
 650:	0e c0       	rjmp	.+28     	; 0x66e <main+0x17c>
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 65a:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 65e:	14 c0       	rjmp	.+40     	; 0x688 <main+0x196>
 660:	85 e0       	ldi	r24, 0x05	; 5
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 668:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 66c:	0d c0       	rjmp	.+26     	; 0x688 <main+0x196>
 66e:	87 e0       	ldi	r24, 0x07	; 7
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 676:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 67a:	06 c0       	rjmp	.+12     	; 0x688 <main+0x196>
 67c:	87 e0       	ldi	r24, 0x07	; 7
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 684:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 688:	4d dd       	rcall	.-1382   	; 0x124 <Initialise_USI_Tx>
 68a:	8f ef       	ldi	r24, 0xFF	; 255
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	9b bd       	out	0x2b, r25	; 43
 690:	8a bd       	out	0x2a, r24	; 42
	
	sei();																//Required by USI and cal subroutines
 692:	78 94       	sei
	
		

	Char_from_USI(0);													//Pause while Rx/Tx lines are connected
 694:	80 e0       	ldi	r24, 0x00	; 0
 696:	5b dd       	rcall	.-1354   	; 0x14e <Char_from_USI>
	
	
	
	OSCCAL_DV = OSCCAL;													//Default OSCCAL
 698:	81 b7       	in	r24, 0x31	; 49
 69a:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <OSCCAL_DV>
	OSCCAL_WV = OSCCAL;													//Value automatically selected
 69e:	d1 b7       	in	r29, 0x31	; 49
	OSCCAL_UV = OSCCAL;													//Value selected by user
 6a0:	b1 b6       	in	r11, 0x31	; 49
	OSCCAL = 0xF0;
 6a2:	80 ef       	ldi	r24, 0xF0	; 240
 6a4:	81 bf       	out	0x31, r24	; 49

int main (void)
{long error;
	unsigned char  OSCCAL_WV, OSCCAL_min = 0, offset, OSCCAL_UV;
	
	char counter = 0;
 6a6:	c0 e0       	ldi	r28, 0x00	; 0
	OSCCAL_DV = OSCCAL;													//Default OSCCAL
	OSCCAL_WV = OSCCAL;													//Value automatically selected
	OSCCAL_UV = OSCCAL;													//Value selected by user
	OSCCAL = 0xF0;
	while (OSCCAL>= 0x0F){//OSCCAL;
		if(!(OSCCAL%3))Char_to_USI('.');								//Print . while stepping through OSCCAL values
 6a8:	13 e0       	ldi	r17, 0x03	; 3
	
	OSCCAL_DV = OSCCAL;													//Default OSCCAL
	OSCCAL_WV = OSCCAL;													//Value automatically selected
	OSCCAL_UV = OSCCAL;													//Value selected by user
	OSCCAL = 0xF0;
	while (OSCCAL>= 0x0F){//OSCCAL;
 6aa:	17 c0       	rjmp	.+46     	; 0x6da <main+0x1e8>
		if(!(OSCCAL%3))Char_to_USI('.');								//Print . while stepping through OSCCAL values
 6ac:	81 b7       	in	r24, 0x31	; 49
 6ae:	61 2f       	mov	r22, r17
 6b0:	31 d2       	rcall	.+1122   	; 0xb14 <__udivmodqi4>
 6b2:	91 11       	cpse	r25, r1
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <main+0x1c8>
 6b6:	8e e2       	ldi	r24, 0x2E	; 46
 6b8:	10 dd       	rcall	.-1504   	; 0xda <Char_to_USI>
		error = compute_error(1,0);										//All error values are positive
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	8b de       	rcall	.-746    	; 0x3d6 <compute_error>
		if(error <1000) OSCCAL_WV = OSCCAL;
 6c0:	68 3e       	cpi	r22, 0xE8	; 232
 6c2:	73 40       	sbci	r23, 0x03	; 3
 6c4:	81 05       	cpc	r24, r1
 6c6:	91 05       	cpc	r25, r1
 6c8:	0c f0       	brlt	.+2      	; 0x6cc <main+0x1da>
 6ca:	5e c1       	rjmp	.+700    	; 0x988 <main+0x496>
 6cc:	d1 b7       	in	r29, 0x31	; 49
		if(error < 1000) counter += 1; else counter =0;					//Exit for viable value of OSCCAL
 6ce:	cf 5f       	subi	r28, 0xFF	; 255
		OSCCAL -= 2;
 6d0:	81 b7       	in	r24, 0x31	; 49
 6d2:	82 50       	subi	r24, 0x02	; 2
 6d4:	81 bf       	out	0x31, r24	; 49
	if (counter == 4)break;	}
 6d6:	c4 30       	cpi	r28, 0x04	; 4
 6d8:	19 f0       	breq	.+6      	; 0x6e0 <main+0x1ee>
	
	OSCCAL_DV = OSCCAL;													//Default OSCCAL
	OSCCAL_WV = OSCCAL;													//Value automatically selected
	OSCCAL_UV = OSCCAL;													//Value selected by user
	OSCCAL = 0xF0;
	while (OSCCAL>= 0x0F){//OSCCAL;
 6da:	81 b7       	in	r24, 0x31	; 49
 6dc:	8f 30       	cpi	r24, 0x0F	; 15
 6de:	30 f7       	brcc	.-52     	; 0x6ac <main+0x1ba>
		if(error <1000) OSCCAL_WV = OSCCAL;
		if(error < 1000) counter += 1; else counter =0;					//Exit for viable value of OSCCAL
		OSCCAL -= 2;
	if (counter == 4)break;	}
	
	newline();
 6e0:	82 dd       	rcall	.-1276   	; 0x1e6 <newline>
	set_device_type_and_memory_size;									//Confirm device type
 6e2:	e0 ec       	ldi	r30, 0xC0	; 192
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	8e e7       	ldi	r24, 0x7E	; 126
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	91 83       	std	Z+1, r25	; 0x01
 6ec:	80 83       	st	Z, r24
 6ee:	82 e8       	ldi	r24, 0x82	; 130
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	93 83       	std	Z+3, r25	; 0x03
 6f4:	82 83       	std	Z+2, r24	; 0x02
 6f6:	86 e8       	ldi	r24, 0x86	; 134
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	95 83       	std	Z+5, r25	; 0x05
 6fc:	84 83       	std	Z+4, r24	; 0x04
 6fe:	8a e8       	ldi	r24, 0x8A	; 138
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	97 83       	std	Z+7, r25	; 0x07
 704:	86 83       	std	Z+6, r24	; 0x06
 706:	8f e8       	ldi	r24, 0x8F	; 143
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	91 87       	std	Z+9, r25	; 0x09
 70c:	80 87       	std	Z+8, r24	; 0x08
 70e:	84 e9       	ldi	r24, 0x94	; 148
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	93 87       	std	Z+11, r25	; 0x0b
 714:	82 87       	std	Z+10, r24	; 0x0a
 716:	89 e9       	ldi	r24, 0x99	; 153
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	95 87       	std	Z+13, r25	; 0x0d
 71c:	84 87       	std	Z+12, r24	; 0x0c
 71e:	8e e9       	ldi	r24, 0x9E	; 158
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	97 87       	std	Z+15, r25	; 0x0f
 724:	86 87       	std	Z+14, r24	; 0x0e
 726:	8c ef       	ldi	r24, 0xFC	; 252
 728:	9f e1       	ldi	r25, 0x1F	; 31
 72a:	3e d2       	rcall	.+1148   	; 0xba8 <eeprom_read_byte>
 72c:	c8 2f       	mov	r28, r24
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	90 93 dc 00 	sts	0x00DC, r25	; 0x8000dc <sig_byte_2+0x1>
 734:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <sig_byte_2>
 738:	8b ef       	ldi	r24, 0xFB	; 251
 73a:	9f e1       	ldi	r25, 0x1F	; 31
 73c:	35 d2       	rcall	.+1130   	; 0xba8 <eeprom_read_byte>
 73e:	28 2f       	mov	r18, r24
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	30 93 d9 00 	sts	0x00D9, r19	; 0x8000d9 <sig_byte_3+0x1>
 746:	20 93 d8 00 	sts	0x00D8, r18	; 0x8000d8 <sig_byte_3>
 74a:	c2 39       	cpi	r28, 0x92	; 146
 74c:	91 f1       	breq	.+100    	; 0x7b2 <main+0x2c0>
 74e:	c3 39       	cpi	r28, 0x93	; 147
 750:	09 f4       	brne	.+2      	; 0x754 <main+0x262>
 752:	55 c0       	rjmp	.+170    	; 0x7fe <main+0x30c>
 754:	c1 39       	cpi	r28, 0x91	; 145
 756:	09 f0       	breq	.+2      	; 0x75a <main+0x268>
 758:	78 c0       	rjmp	.+240    	; 0x84a <main+0x358>
 75a:	20 e0       	ldi	r18, 0x00	; 0
 75c:	34 e0       	ldi	r19, 0x04	; 4
 75e:	30 93 d7 00 	sts	0x00D7, r19	; 0x8000d7 <FlashSZ+0x1>
 762:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <FlashSZ>
 766:	20 e8       	ldi	r18, 0x80	; 128
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <EE_size+0x1>
 76e:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <EE_size>
 772:	8b 30       	cpi	r24, 0x0B	; 11
 774:	59 f0       	breq	.+22     	; 0x78c <main+0x29a>
 776:	8c 30       	cpi	r24, 0x0C	; 12
 778:	71 f0       	breq	.+28     	; 0x796 <main+0x2a4>
 77a:	89 30       	cpi	r24, 0x09	; 9
 77c:	99 f4       	brne	.+38     	; 0x7a4 <main+0x2b2>
 77e:	86 e0       	ldi	r24, 0x06	; 6
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 786:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 78a:	65 c0       	rjmp	.+202    	; 0x856 <main+0x364>
 78c:	10 92 d1 00 	sts	0x00D1, r1	; 0x8000d1 <device_ptr+0x1>
 790:	10 92 d0 00 	sts	0x00D0, r1	; 0x8000d0 <device_ptr>
 794:	60 c0       	rjmp	.+192    	; 0x856 <main+0x364>
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 79e:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 7a2:	59 c0       	rjmp	.+178    	; 0x856 <main+0x364>
 7a4:	87 e0       	ldi	r24, 0x07	; 7
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 7ac:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 7b0:	52 c0       	rjmp	.+164    	; 0x856 <main+0x364>
 7b2:	20 e0       	ldi	r18, 0x00	; 0
 7b4:	38 e0       	ldi	r19, 0x08	; 8
 7b6:	30 93 d7 00 	sts	0x00D7, r19	; 0x8000d7 <FlashSZ+0x1>
 7ba:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <FlashSZ>
 7be:	20 e0       	ldi	r18, 0x00	; 0
 7c0:	31 e0       	ldi	r19, 0x01	; 1
 7c2:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <EE_size+0x1>
 7c6:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <EE_size>
 7ca:	87 30       	cpi	r24, 0x07	; 7
 7cc:	19 f0       	breq	.+6      	; 0x7d4 <main+0x2e2>
 7ce:	88 30       	cpi	r24, 0x08	; 8
 7d0:	41 f0       	breq	.+16     	; 0x7e2 <main+0x2f0>
 7d2:	0e c0       	rjmp	.+28     	; 0x7f0 <main+0x2fe>
 7d4:	81 e0       	ldi	r24, 0x01	; 1
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 7dc:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 7e0:	3a c0       	rjmp	.+116    	; 0x856 <main+0x364>
 7e2:	84 e0       	ldi	r24, 0x04	; 4
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 7ea:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 7ee:	33 c0       	rjmp	.+102    	; 0x856 <main+0x364>
 7f0:	87 e0       	ldi	r24, 0x07	; 7
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 7f8:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 7fc:	2c c0       	rjmp	.+88     	; 0x856 <main+0x364>
 7fe:	20 e0       	ldi	r18, 0x00	; 0
 800:	30 e1       	ldi	r19, 0x10	; 16
 802:	30 93 d7 00 	sts	0x00D7, r19	; 0x8000d7 <FlashSZ+0x1>
 806:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <FlashSZ>
 80a:	20 e0       	ldi	r18, 0x00	; 0
 80c:	32 e0       	ldi	r19, 0x02	; 2
 80e:	30 93 be 00 	sts	0x00BE, r19	; 0x8000be <EE_size+0x1>
 812:	20 93 bd 00 	sts	0x00BD, r18	; 0x8000bd <EE_size>
 816:	8c 30       	cpi	r24, 0x0C	; 12
 818:	19 f0       	breq	.+6      	; 0x820 <main+0x32e>
 81a:	8d 30       	cpi	r24, 0x0D	; 13
 81c:	41 f0       	breq	.+16     	; 0x82e <main+0x33c>
 81e:	0e c0       	rjmp	.+28     	; 0x83c <main+0x34a>
 820:	82 e0       	ldi	r24, 0x02	; 2
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 828:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 82c:	14 c0       	rjmp	.+40     	; 0x856 <main+0x364>
 82e:	85 e0       	ldi	r24, 0x05	; 5
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 836:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 83a:	0d c0       	rjmp	.+26     	; 0x856 <main+0x364>
 83c:	87 e0       	ldi	r24, 0x07	; 7
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 844:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
 848:	06 c0       	rjmp	.+12     	; 0x856 <main+0x364>
 84a:	87 e0       	ldi	r24, 0x07	; 7
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	90 93 d1 00 	sts	0x00D1, r25	; 0x8000d1 <device_ptr+0x1>
 852:	80 93 d0 00 	sts	0x00D0, r24	; 0x8000d0 <device_ptr>
	Flash_String_to_USI(message_1);
 856:	8a e6       	ldi	r24, 0x6A	; 106
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	c9 dc       	rcall	.-1646   	; 0x1ee <Flash_String_to_USI>
	String_to_USI (Device_type[device_ptr]);
 85c:	e0 91 d0 00 	lds	r30, 0x00D0	; 0x8000d0 <device_ptr>
 860:	f0 91 d1 00 	lds	r31, 0x00D1	; 0x8000d1 <device_ptr+0x1>
 864:	ee 0f       	add	r30, r30
 866:	ff 1f       	adc	r31, r31
 868:	e0 54       	subi	r30, 0x40	; 64
 86a:	ff 4f       	sbci	r31, 0xFF	; 255
 86c:	80 81       	ld	r24, Z
 86e:	91 81       	ldd	r25, Z+1	; 0x01
 870:	9d dc       	rcall	.-1734   	; 0x1ac <String_to_USI>
	if (device_ptr == 7)while(1);										//Device not recognized: Halt
 872:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <device_ptr>
 876:	90 91 d1 00 	lds	r25, 0x00D1	; 0x8000d1 <device_ptr+0x1>
 87a:	07 97       	sbiw	r24, 0x07	; 7
 87c:	09 f4       	brne	.+2      	; 0x880 <main+0x38e>
 87e:	ff cf       	rjmp	.-2      	; 0x87e <main+0x38c>
	
	Flash_String_to_USI(message_2);
 880:	88 e4       	ldi	r24, 0x48	; 72
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	b4 dc       	rcall	.-1688   	; 0x1ee <Flash_String_to_USI>
	
	Num_to_PC(10, OSCCAL_DV);  String_to_USI("  ");
 886:	40 91 bf 00 	lds	r20, 0x00BF	; 0x8000bf <OSCCAL_DV>
 88a:	50 e0       	ldi	r21, 0x00	; 0
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	8a e0       	ldi	r24, 0x0A	; 10
 892:	7d dd       	rcall	.-1286   	; 0x38e <Num_to_PC>
 894:	8b e7       	ldi	r24, 0x7B	; 123
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	89 dc       	rcall	.-1774   	; 0x1ac <String_to_USI>
	Num_to_PC(10, OSCCAL_WV);String_to_USI("  ");
 89a:	4d 2f       	mov	r20, r29
 89c:	50 e0       	ldi	r21, 0x00	; 0
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	8a e0       	ldi	r24, 0x0A	; 10
 8a4:	74 dd       	rcall	.-1304   	; 0x38e <Num_to_PC>
 8a6:	8b e7       	ldi	r24, 0x7B	; 123
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	80 dc       	rcall	.-1792   	; 0x1ac <String_to_USI>
	Num_to_PC(10, eeprom_read_byte((uint8_t*)(EE_size - 2)));
 8ac:	80 91 bd 00 	lds	r24, 0x00BD	; 0x8000bd <EE_size>
 8b0:	90 91 be 00 	lds	r25, 0x00BE	; 0x8000be <EE_size+0x1>
 8b4:	02 97       	sbiw	r24, 0x02	; 2
 8b6:	78 d1       	rcall	.+752    	; 0xba8 <eeprom_read_byte>
 8b8:	48 2f       	mov	r20, r24
 8ba:	50 e0       	ldi	r21, 0x00	; 0
 8bc:	60 e0       	ldi	r22, 0x00	; 0
 8be:	70 e0       	ldi	r23, 0x00	; 0
 8c0:	8a e0       	ldi	r24, 0x0A	; 10
 8c2:	65 dd       	rcall	.-1334   	; 0x38e <Num_to_PC>
	newline();
 8c4:	90 dc       	rcall	.-1760   	; 0x1e6 <newline>
 8c6:	c1 ef       	ldi	r28, 0xF1	; 241
 8c8:	cd 0f       	add	r28, r29
 8ca:	0d 2f       	mov	r16, r29
 8cc:	10 e0       	ldi	r17, 0x00	; 0
 8ce:	0f 50       	subi	r16, 0x0F	; 15
 8d0:	11 09       	sbc	r17, r1
 8d2:	68 94       	set
 8d4:	99 24       	eor	r9, r9
 8d6:	94 f8       	bld	r9, 4
 8d8:	9d 0e       	add	r9, r29
	
	counter = 0;
 8da:	a1 2c       	mov	r10, r1



int main (void)
{long error;
	unsigned char  OSCCAL_WV, OSCCAL_min = 0, offset, OSCCAL_UV;
 8dc:	81 2c       	mov	r8, r1
	Num_to_PC(10, eeprom_read_byte((uint8_t*)(EE_size - 2)));
	newline();
	
	counter = 0;
	for (int m = -15; m <=15; m++)										//Print out results
	{Timer_T0_sub(T0_delay_5ms);
 8de:	6c ed       	ldi	r22, 0xDC	; 220
 8e0:	85 e0       	ldi	r24, 0x05	; 5
 8e2:	6f dd       	rcall	.-1314   	; 0x3c2 <Timer_T0_sub>
		OSCCAL = OSCCAL_WV + m;
 8e4:	c1 bf       	out	0x31, r28	; 49
		error = compute_error(2,1);										//Signed error values
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	75 dd       	rcall	.-1302   	; 0x3d6 <compute_error>
 8ec:	6b 01       	movw	r12, r22
 8ee:	7c 01       	movw	r14, r24
		if ((error < -1000) ||
 8f0:	dc 01       	movw	r26, r24
 8f2:	cb 01       	movw	r24, r22
 8f4:	88 51       	subi	r24, 0x18	; 24
 8f6:	9c 4f       	sbci	r25, 0xFC	; 252
 8f8:	af 4f       	sbci	r26, 0xFF	; 255
 8fa:	bf 4f       	sbci	r27, 0xFF	; 255
 8fc:	81 3d       	cpi	r24, 0xD1	; 209
 8fe:	97 40       	sbci	r25, 0x07	; 7
 900:	a1 05       	cpc	r26, r1
 902:	b1 05       	cpc	r27, r1
 904:	30 f4       	brcc	.+12     	; 0x912 <main+0x420>
		(error > 1000))counter = 0; else counter += 1;
 906:	a3 94       	inc	r10
		if(counter == 1)OSCCAL_min = OSCCAL;
 908:	81 e0       	ldi	r24, 0x01	; 1
 90a:	a8 12       	cpse	r10, r24
 90c:	03 c0       	rjmp	.+6      	; 0x914 <main+0x422>
 90e:	81 b6       	in	r8, 0x31	; 49
 910:	01 c0       	rjmp	.+2      	; 0x914 <main+0x422>
	for (int m = -15; m <=15; m++)										//Print out results
	{Timer_T0_sub(T0_delay_5ms);
		OSCCAL = OSCCAL_WV + m;
		error = compute_error(2,1);										//Signed error values
		if ((error < -1000) ||
		(error > 1000))counter = 0; else counter += 1;
 912:	a1 2c       	mov	r10, r1
		if(counter == 1)OSCCAL_min = OSCCAL;
		
		OSCCAL = OSCCAL_WV;
 914:	d1 bf       	out	0x31, r29	; 49
		
		Num_to_PC(16, counter); Char_to_USI('\t');
 916:	4a 2d       	mov	r20, r10
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	80 e1       	ldi	r24, 0x10	; 16
 920:	36 dd       	rcall	.-1428   	; 0x38e <Num_to_PC>
 922:	89 e0       	ldi	r24, 0x09	; 9
 924:	da db       	rcall	.-2124   	; 0xda <Char_to_USI>
		Num_to_PC(10, OSCCAL_WV + m); Char_to_USI('\t');
 926:	a8 01       	movw	r20, r16
 928:	01 2e       	mov	r0, r17
 92a:	00 0c       	add	r0, r0
 92c:	66 0b       	sbc	r22, r22
 92e:	77 0b       	sbc	r23, r23
 930:	8a e0       	ldi	r24, 0x0A	; 10
 932:	2d dd       	rcall	.-1446   	; 0x38e <Num_to_PC>
 934:	89 e0       	ldi	r24, 0x09	; 9
 936:	d1 db       	rcall	.-2142   	; 0xda <Char_to_USI>
		Num_to_PC(10, error);
 938:	b7 01       	movw	r22, r14
 93a:	a6 01       	movw	r20, r12
 93c:	8a e0       	ldi	r24, 0x0A	; 10
 93e:	27 dd       	rcall	.-1458   	; 0x38e <Num_to_PC>
	newline();}
 940:	52 dc       	rcall	.-1884   	; 0x1e6 <newline>
 942:	cf 5f       	subi	r28, 0xFF	; 255
 944:	0f 5f       	subi	r16, 0xFF	; 255
 946:	1f 4f       	sbci	r17, 0xFF	; 255
	Num_to_PC(10, OSCCAL_WV);String_to_USI("  ");
	Num_to_PC(10, eeprom_read_byte((uint8_t*)(EE_size - 2)));
	newline();
	
	counter = 0;
	for (int m = -15; m <=15; m++)										//Print out results
 948:	c9 11       	cpse	r28, r9
 94a:	c9 cf       	rjmp	.-110    	; 0x8de <main+0x3ec>
		Num_to_PC(16, counter); Char_to_USI('\t');
		Num_to_PC(10, OSCCAL_WV + m); Char_to_USI('\t');
		Num_to_PC(10, error);
	newline();}
	
	Flash_String_to_USI(message_3);										//User chooses actual value for OSCCAL
 94c:	82 e2       	ldi	r24, 0x22	; 34
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	4e dc       	rcall	.-1892   	; 0x1ee <Flash_String_to_USI>
	
	
	while(1){
		if ((Rx_data_byte = Char_from_USI (0)) == 'x')break;
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	fc db       	rcall	.-2056   	; 0x14e <Char_from_USI>
 956:	88 37       	cpi	r24, 0x78	; 120
 958:	81 f0       	breq	.+32     	; 0x97a <main+0x488>
		offset = Rx_data_byte - '1';
 95a:	9f ec       	ldi	r25, 0xCF	; 207
 95c:	98 0f       	add	r25, r24
		if(offset > 9)offset -= 7;
 95e:	9a 30       	cpi	r25, 0x0A	; 10
 960:	10 f0       	brcs	.+4      	; 0x966 <main+0x474>
 962:	98 ec       	ldi	r25, 0xC8	; 200
 964:	98 0f       	add	r25, r24
		OSCCAL_UV = OSCCAL_min + offset;
 966:	b8 2c       	mov	r11, r8
 968:	b9 0e       	add	r11, r25
		Num_to_PC(10, OSCCAL_UV);
 96a:	4b 2d       	mov	r20, r11
 96c:	50 e0       	ldi	r21, 0x00	; 0
 96e:	60 e0       	ldi	r22, 0x00	; 0
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	8a e0       	ldi	r24, 0x0A	; 10
 974:	0c dd       	rcall	.-1512   	; 0x38e <Num_to_PC>
		newline();
 976:	37 dc       	rcall	.-1938   	; 0x1e6 <newline>
	}
 978:	ec cf       	rjmp	.-40     	; 0x952 <main+0x460>
	save_cal_values(OSCCAL_UV);
 97a:	8b 2d       	mov	r24, r11
 97c:	71 dd       	rcall	.-1310   	; 0x460 <save_cal_values>
	printout_cal_values();
 97e:	8a dd       	rcall	.-1260   	; 0x494 <printout_cal_values>
	
	
	while(1)Char_to_USI(Char_from_USI (0));
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	e5 db       	rcall	.-2102   	; 0x14e <Char_from_USI>
 984:	aa db       	rcall	.-2220   	; 0xda <Char_to_USI>
 986:	fc cf       	rjmp	.-8      	; 0x980 <main+0x48e>
	while (OSCCAL>= 0x0F){//OSCCAL;
		if(!(OSCCAL%3))Char_to_USI('.');								//Print . while stepping through OSCCAL values
		error = compute_error(1,0);										//All error values are positive
		if(error <1000) OSCCAL_WV = OSCCAL;
		if(error < 1000) counter += 1; else counter =0;					//Exit for viable value of OSCCAL
		OSCCAL -= 2;
 988:	81 b7       	in	r24, 0x31	; 49
 98a:	82 50       	subi	r24, 0x02	; 2
 98c:	81 bf       	out	0x31, r24	; 49
	OSCCAL = 0xF0;
	while (OSCCAL>= 0x0F){//OSCCAL;
		if(!(OSCCAL%3))Char_to_USI('.');								//Print . while stepping through OSCCAL values
		error = compute_error(1,0);										//All error values are positive
		if(error <1000) OSCCAL_WV = OSCCAL;
		if(error < 1000) counter += 1; else counter =0;					//Exit for viable value of OSCCAL
 98e:	c0 e0       	ldi	r28, 0x00	; 0
 990:	a4 ce       	rjmp	.-696    	; 0x6da <main+0x1e8>

00000992 <__vector_9>:



/************************************************************************************************/
ISR(TIM0_COMPA_vect)												//Clock signal for USI: shifts data in the USIDataRegister
{
 992:	1f 92       	push	r1
 994:	0f 92       	push	r0
 996:	0f b6       	in	r0, 0x3f	; 63
 998:	0f 92       	push	r0
 99a:	11 24       	eor	r1, r1
 99c:	8f 93       	push	r24
	if(Transmitter_active)OCR0A = Tx_clock;
 99e:	d5 9b       	sbis	0x1a, 5	; 26
 9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <__vector_9+0x16>
 9a2:	89 eb       	ldi	r24, 0xB9	; 185
 9a4:	86 bf       	out	0x36, r24	; 54
 9a6:	02 c0       	rjmp	.+4      	; 0x9ac <__vector_9+0x1a>
	else OCR0A = Rx_clock;											//Necessary because receiver initially sets half the baud rate
 9a8:	89 eb       	ldi	r24, 0xB9	; 185
 9aa:	86 bf       	out	0x36, r24	; 54
TCNT0 = 0;}															//Reset T0
 9ac:	12 be       	out	0x32, r1	; 50
 9ae:	8f 91       	pop	r24
 9b0:	0f 90       	pop	r0
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	0f 90       	pop	r0
 9b6:	1f 90       	pop	r1
 9b8:	18 95       	reti

000009ba <__vector_16>:


/************************************************************************************************/
ISR(USI_OVF_vect)													//USI counter overflows indicating the end of a transmission or reception

{USISR |= (1 << USIOIF);											//Clear USI interrupt flag
 9ba:	1f 92       	push	r1
 9bc:	0f 92       	push	r0
 9be:	0f b6       	in	r0, 0x3f	; 63
 9c0:	0f 92       	push	r0
 9c2:	11 24       	eor	r1, r1
 9c4:	8f 93       	push	r24
 9c6:	76 9a       	sbi	0x0e, 6	; 14

	if(Transmitter_active)
 9c8:	d5 9b       	sbis	0x1a, 5	; 26
 9ca:	04 c0       	rjmp	.+8      	; 0x9d4 <__vector_16+0x1a>
	char_transmitted = 1;
 9cc:	81 e0       	ldi	r24, 0x01	; 1
 9ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__data_end>
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <__vector_16+0x20>
	else
char_received = 1;}													//USI receiver active
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <char_received>
 9da:	8f 91       	pop	r24
 9dc:	0f 90       	pop	r0
 9de:	0f be       	out	0x3f, r0	; 63
 9e0:	0f 90       	pop	r0
 9e2:	1f 90       	pop	r1
 9e4:	18 95       	reti

000009e6 <__vector_2>:




/************************************************************************************************/
ISR (PCINT0_vect){													//Pin change interrupt on DI pin or SCK pins
 9e6:	1f 92       	push	r1
 9e8:	0f 92       	push	r0
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	0f 92       	push	r0
 9ee:	11 24       	eor	r1, r1
 9f0:	2f 93       	push	r18
 9f2:	3f 93       	push	r19
 9f4:	4f 93       	push	r20
 9f6:	5f 93       	push	r21
 9f8:	6f 93       	push	r22
 9fa:	7f 93       	push	r23
 9fc:	8f 93       	push	r24
 9fe:	9f 93       	push	r25
 a00:	af 93       	push	r26
 a02:	bf 93       	push	r27
										
	if(calibration_active){											// Calibration subroutine active (PCI onSCK pin)
 a04:	94 9b       	sbis	0x12, 4	; 18
 a06:	3c c0       	rjmp	.+120    	; 0xa80 <__vector_2+0x9a>
		if (!(TCCR1B)) {
 a08:	8e b5       	in	r24, 0x2e	; 46
 a0a:	81 11       	cpse	r24, r1
 a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__vector_2+0x42>
			TCNT1_sum = 0;
 a0e:	10 92 dd 00 	sts	0x00DD, r1	; 0x8000dd <TCNT1_sum>
 a12:	10 92 de 00 	sts	0x00DE, r1	; 0x8000de <TCNT1_sum+0x1>
 a16:	10 92 df 00 	sts	0x00DF, r1	; 0x8000df <TCNT1_sum+0x2>
 a1a:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <TCNT1_sum+0x3>
			TCNT1 = 0;
 a1e:	1d bc       	out	0x2d, r1	; 45
 a20:	1c bc       	out	0x2c, r1	; 44
			TCCR1B = prescaller_setting;							//1MHz clock
 a22:	82 e0       	ldi	r24, 0x02	; 2
 a24:	8e bd       	out	0x2e, r24	; 46
 a26:	42 c0       	rjmp	.+132    	; 0xaac <__vector_2+0xc6>
		}
		
		else {TCCR1B = 0; int_counter += 1;
 a28:	1e bc       	out	0x2e, r1	; 46
 a2a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <int_counter>
 a2e:	8f 5f       	subi	r24, 0xFF	; 255
 a30:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <int_counter>
			error_sum = error_sum + TCNT1_sum - 32768 + TCNT1;
 a34:	40 91 d2 00 	lds	r20, 0x00D2	; 0x8000d2 <error_sum>
 a38:	50 91 d3 00 	lds	r21, 0x00D3	; 0x8000d3 <error_sum+0x1>
 a3c:	60 91 d4 00 	lds	r22, 0x00D4	; 0x8000d4 <error_sum+0x2>
 a40:	70 91 d5 00 	lds	r23, 0x00D5	; 0x8000d5 <error_sum+0x3>
 a44:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <TCNT1_sum>
 a48:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <TCNT1_sum+0x1>
 a4c:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <TCNT1_sum+0x2>
 a50:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <TCNT1_sum+0x3>
 a54:	2c b5       	in	r18, 0x2c	; 44
 a56:	3d b5       	in	r19, 0x2d	; 45
 a58:	84 0f       	add	r24, r20
 a5a:	95 1f       	adc	r25, r21
 a5c:	a6 1f       	adc	r26, r22
 a5e:	b7 1f       	adc	r27, r23
 a60:	90 58       	subi	r25, 0x80	; 128
 a62:	a1 09       	sbc	r26, r1
 a64:	b1 09       	sbc	r27, r1
 a66:	82 0f       	add	r24, r18
 a68:	93 1f       	adc	r25, r19
 a6a:	a1 1d       	adc	r26, r1
 a6c:	b1 1d       	adc	r27, r1
 a6e:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <error_sum>
 a72:	90 93 d3 00 	sts	0x00D3, r25	; 0x8000d3 <error_sum+0x1>
 a76:	a0 93 d4 00 	sts	0x00D4, r26	; 0x8000d4 <error_sum+0x2>
 a7a:	b0 93 d5 00 	sts	0x00D5, r27	; 0x8000d5 <error_sum+0x3>
 a7e:	16 c0       	rjmp	.+44     	; 0xaac <__vector_2+0xc6>
		}
	}
	
	else{															//USI receiver active: start bit detected (PCI on DI pin)
		if(DI_pin_low)
 a80:	ce 99       	sbic	0x19, 6	; 25
 a82:	14 c0       	rjmp	.+40     	; 0xaac <__vector_2+0xc6>
		{TCNT0 = 0;
 a84:	12 be       	out	0x32, r1	; 50
			OCR0A = Rx_clock/2;
 a86:	8c e5       	ldi	r24, 0x5C	; 92
 a88:	86 bf       	out	0x36, r24	; 54
			Start_clock;											//Start baud rate clock (Half period)
 a8a:	81 e0       	ldi	r24, 0x01	; 1
 a8c:	83 bf       	out	0x33, r24	; 51
			TIFR0 = (1 << OCF0A);									//Clear spurious interrupts
 a8e:	82 e0       	ldi	r24, 0x02	; 2
 a90:	88 bf       	out	0x38, r24	; 56
			
			TIMSK0 |= (1 << OCIE0A);								//Enable interrupt on output compare
 a92:	89 b7       	in	r24, 0x39	; 57
 a94:	82 60       	ori	r24, 0x02	; 2
 a96:	89 bf       	out	0x39, r24	; 57
			USICR |= ( 1 << USIOIE);								//Enable USI counter interrupt
 a98:	6e 9a       	sbi	0x0d, 6	; 13
			USICR |= (1 << USIWM0);									//Select USI 3-wire mode
 a9a:	6c 9a       	sbi	0x0d, 4	; 13
			USICR |= (1 << USICS0);									//Select USI clock source (timer0 compare match)
 a9c:	6a 9a       	sbi	0x0d, 2	; 13

			char_received = 0;
 a9e:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <char_received>

			USISR = 0xF0 | 0x07;									//8 data bits + start bit
 aa2:	87 ef       	ldi	r24, 0xF7	; 247
 aa4:	8e b9       	out	0x0e, r24	; 14
		Disable_PCI_on_DI_pin;}}
 aa6:	8b b7       	in	r24, 0x3b	; 59
 aa8:	8f 7e       	andi	r24, 0xEF	; 239
 aaa:	8b bf       	out	0x3b, r24	; 59
	}
 aac:	bf 91       	pop	r27
 aae:	af 91       	pop	r26
 ab0:	9f 91       	pop	r25
 ab2:	8f 91       	pop	r24
 ab4:	7f 91       	pop	r23
 ab6:	6f 91       	pop	r22
 ab8:	5f 91       	pop	r21
 aba:	4f 91       	pop	r20
 abc:	3f 91       	pop	r19
 abe:	2f 91       	pop	r18
 ac0:	0f 90       	pop	r0
 ac2:	0f be       	out	0x3f, r0	; 63
 ac4:	0f 90       	pop	r0
 ac6:	1f 90       	pop	r1
 ac8:	18 95       	reti

00000aca <__vector_6>:

	

ISR(TIM1_COMPA_vect){TCNT1_sum += 0x100; }
 aca:	1f 92       	push	r1
 acc:	0f 92       	push	r0
 ace:	0f b6       	in	r0, 0x3f	; 63
 ad0:	0f 92       	push	r0
 ad2:	11 24       	eor	r1, r1
 ad4:	8f 93       	push	r24
 ad6:	9f 93       	push	r25
 ad8:	af 93       	push	r26
 ada:	bf 93       	push	r27
 adc:	80 91 dd 00 	lds	r24, 0x00DD	; 0x8000dd <TCNT1_sum>
 ae0:	90 91 de 00 	lds	r25, 0x00DE	; 0x8000de <TCNT1_sum+0x1>
 ae4:	a0 91 df 00 	lds	r26, 0x00DF	; 0x8000df <TCNT1_sum+0x2>
 ae8:	b0 91 e0 00 	lds	r27, 0x00E0	; 0x8000e0 <TCNT1_sum+0x3>
 aec:	9f 5f       	subi	r25, 0xFF	; 255
 aee:	af 4f       	sbci	r26, 0xFF	; 255
 af0:	bf 4f       	sbci	r27, 0xFF	; 255
 af2:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <TCNT1_sum>
 af6:	90 93 de 00 	sts	0x00DE, r25	; 0x8000de <TCNT1_sum+0x1>
 afa:	a0 93 df 00 	sts	0x00DF, r26	; 0x8000df <TCNT1_sum+0x2>
 afe:	b0 93 e0 00 	sts	0x00E0, r27	; 0x8000e0 <TCNT1_sum+0x3>
 b02:	bf 91       	pop	r27
 b04:	af 91       	pop	r26
 b06:	9f 91       	pop	r25
 b08:	8f 91       	pop	r24
 b0a:	0f 90       	pop	r0
 b0c:	0f be       	out	0x3f, r0	; 63
 b0e:	0f 90       	pop	r0
 b10:	1f 90       	pop	r1
 b12:	18 95       	reti

00000b14 <__udivmodqi4>:
 b14:	99 1b       	sub	r25, r25
 b16:	79 e0       	ldi	r23, 0x09	; 9
 b18:	04 c0       	rjmp	.+8      	; 0xb22 <__udivmodqi4_ep>

00000b1a <__udivmodqi4_loop>:
 b1a:	99 1f       	adc	r25, r25
 b1c:	96 17       	cp	r25, r22
 b1e:	08 f0       	brcs	.+2      	; 0xb22 <__udivmodqi4_ep>
 b20:	96 1b       	sub	r25, r22

00000b22 <__udivmodqi4_ep>:
 b22:	88 1f       	adc	r24, r24
 b24:	7a 95       	dec	r23
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__udivmodqi4_loop>
 b28:	80 95       	com	r24
 b2a:	08 95       	ret

00000b2c <__divmodsi4>:
 b2c:	05 2e       	mov	r0, r21
 b2e:	97 fb       	bst	r25, 7
 b30:	16 f4       	brtc	.+4      	; 0xb36 <__divmodsi4+0xa>
 b32:	00 94       	com	r0
 b34:	0f d0       	rcall	.+30     	; 0xb54 <__negsi2>
 b36:	57 fd       	sbrc	r21, 7
 b38:	05 d0       	rcall	.+10     	; 0xb44 <__divmodsi4_neg2>
 b3a:	14 d0       	rcall	.+40     	; 0xb64 <__udivmodsi4>
 b3c:	07 fc       	sbrc	r0, 7
 b3e:	02 d0       	rcall	.+4      	; 0xb44 <__divmodsi4_neg2>
 b40:	46 f4       	brtc	.+16     	; 0xb52 <__divmodsi4_exit>
 b42:	08 c0       	rjmp	.+16     	; 0xb54 <__negsi2>

00000b44 <__divmodsi4_neg2>:
 b44:	50 95       	com	r21
 b46:	40 95       	com	r20
 b48:	30 95       	com	r19
 b4a:	21 95       	neg	r18
 b4c:	3f 4f       	sbci	r19, 0xFF	; 255
 b4e:	4f 4f       	sbci	r20, 0xFF	; 255
 b50:	5f 4f       	sbci	r21, 0xFF	; 255

00000b52 <__divmodsi4_exit>:
 b52:	08 95       	ret

00000b54 <__negsi2>:
 b54:	90 95       	com	r25
 b56:	80 95       	com	r24
 b58:	70 95       	com	r23
 b5a:	61 95       	neg	r22
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	8f 4f       	sbci	r24, 0xFF	; 255
 b60:	9f 4f       	sbci	r25, 0xFF	; 255
 b62:	08 95       	ret

00000b64 <__udivmodsi4>:
 b64:	a1 e2       	ldi	r26, 0x21	; 33
 b66:	1a 2e       	mov	r1, r26
 b68:	aa 1b       	sub	r26, r26
 b6a:	bb 1b       	sub	r27, r27
 b6c:	fd 01       	movw	r30, r26
 b6e:	0d c0       	rjmp	.+26     	; 0xb8a <__udivmodsi4_ep>

00000b70 <__udivmodsi4_loop>:
 b70:	aa 1f       	adc	r26, r26
 b72:	bb 1f       	adc	r27, r27
 b74:	ee 1f       	adc	r30, r30
 b76:	ff 1f       	adc	r31, r31
 b78:	a2 17       	cp	r26, r18
 b7a:	b3 07       	cpc	r27, r19
 b7c:	e4 07       	cpc	r30, r20
 b7e:	f5 07       	cpc	r31, r21
 b80:	20 f0       	brcs	.+8      	; 0xb8a <__udivmodsi4_ep>
 b82:	a2 1b       	sub	r26, r18
 b84:	b3 0b       	sbc	r27, r19
 b86:	e4 0b       	sbc	r30, r20
 b88:	f5 0b       	sbc	r31, r21

00000b8a <__udivmodsi4_ep>:
 b8a:	66 1f       	adc	r22, r22
 b8c:	77 1f       	adc	r23, r23
 b8e:	88 1f       	adc	r24, r24
 b90:	99 1f       	adc	r25, r25
 b92:	1a 94       	dec	r1
 b94:	69 f7       	brne	.-38     	; 0xb70 <__udivmodsi4_loop>
 b96:	60 95       	com	r22
 b98:	70 95       	com	r23
 b9a:	80 95       	com	r24
 b9c:	90 95       	com	r25
 b9e:	9b 01       	movw	r18, r22
 ba0:	ac 01       	movw	r20, r24
 ba2:	bd 01       	movw	r22, r26
 ba4:	cf 01       	movw	r24, r30
 ba6:	08 95       	ret

00000ba8 <eeprom_read_byte>:
 ba8:	e1 99       	sbic	0x1c, 1	; 28
 baa:	fe cf       	rjmp	.-4      	; 0xba8 <eeprom_read_byte>
 bac:	9f bb       	out	0x1f, r25	; 31
 bae:	8e bb       	out	0x1e, r24	; 30
 bb0:	e0 9a       	sbi	0x1c, 0	; 28
 bb2:	99 27       	eor	r25, r25
 bb4:	8d b3       	in	r24, 0x1d	; 29
 bb6:	08 95       	ret

00000bb8 <eeprom_write_byte>:
 bb8:	26 2f       	mov	r18, r22

00000bba <eeprom_write_r18>:
 bba:	e1 99       	sbic	0x1c, 1	; 28
 bbc:	fe cf       	rjmp	.-4      	; 0xbba <eeprom_write_r18>
 bbe:	1c ba       	out	0x1c, r1	; 28
 bc0:	9f bb       	out	0x1f, r25	; 31
 bc2:	8e bb       	out	0x1e, r24	; 30
 bc4:	2d bb       	out	0x1d, r18	; 29
 bc6:	0f b6       	in	r0, 0x3f	; 63
 bc8:	f8 94       	cli
 bca:	e2 9a       	sbi	0x1c, 2	; 28
 bcc:	e1 9a       	sbi	0x1c, 1	; 28
 bce:	0f be       	out	0x3f, r0	; 63
 bd0:	01 96       	adiw	r24, 0x01	; 1
 bd2:	08 95       	ret

00000bd4 <_exit>:
 bd4:	f8 94       	cli

00000bd6 <__stop_program>:
 bd6:	ff cf       	rjmp	.-2      	; 0xbd6 <__stop_program>
